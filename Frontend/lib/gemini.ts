const GEMINI_API_KEY = "AIzaSyCOOnCXXPIaG1mJ0TLjgoZHQt7JZ4y-gn0";
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

export interface GeminiResponse {
  success: boolean;
  content?: string;
  error?: string;
}

export interface ChampionAnalysisData {
  championName: string;
  matchStats: {
    kills: number;
    deaths: number;
    assists: number;
    cs: number;
    gold: number;
    damage: number;
    visionScore: number;
    win: boolean;
  };
  championStats: {
    level: number;
    position: string;
    role: string;
  };
}

export interface MatchAnalysisData {
  matchId: string;
  gameDuration: number;
  gameMode: string;
  queueId: number;
  teams: {
    teamId: number;
    win: boolean;
    participants: {
      championName: string;
      summonerName: string;
      kills: number;
      deaths: number;
      assists: number;
      cs: number;
      gold: number;
      damage: number;
      visionScore: number;
      level: number;
      position: string;
    }[];
  }[];
  objectives: {
    baronKills: number;
    dragonKills: number;
    riftHeraldKills: number;
    towerKills: number;
  };
}

export async function analyzeChampionWithGemini(data: ChampionAnalysisData): Promise<GeminiResponse> {
  try {
    const prompt = `You're League of Legends Analyzer Champions Strategy - based on that match statistics and champion statistics - provide some useful tactical and strategy hints for user for improving playing this champion.

Champion: ${data.championName}
Match Statistics:
- KDA: ${data.matchStats.kills}/${data.matchStats.deaths}/${data.matchStats.assists}
- CS: ${data.matchStats.cs}
- Gold Earned: ${data.matchStats.gold}
- Damage Dealt: ${data.matchStats.damage}
- Vision Score: ${data.matchStats.visionScore}
- Result: ${data.matchStats.win ? 'Victory' : 'Defeat'}

Champion Details:
- Level: ${data.championStats.level}
- Position: ${data.championStats.position}
- Role: ${data.championStats.role}

Please provide detailed strategic analysis including:
1. Performance analysis based on the statistics
2. Specific tactical improvements for this champion
3. Itemization suggestions
4. Positioning and teamfight advice
5. Early, mid, and late game strategies
6. Matchup-specific tips
7. Common mistakes to avoid

Format your response in a clear, actionable way that helps the player improve.`;

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    
    if (result.candidates && result.candidates[0] && result.candidates[0].content) {
      const content = result.candidates[0].content.parts[0].text;
      
      // Save response to file
      await saveGeminiResponse(data.championName, content);
      
      return {
        success: true,
        content: content
      };
    } else {
      throw new Error('No content generated by Gemini');
    }
  } catch (error) {
    console.error('Gemini API Error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}

export async function analyzeMatchWithGemini(data: MatchAnalysisData): Promise<GeminiResponse> {
  try {
    const winningTeam = data.teams.find(team => team.win);
    const losingTeam = data.teams.find(team => !team.win);
    
    const prompt = `You're League of Legends Match Analyzer - analyze this complete match data and provide strategic insights, team composition analysis, and key moments that determined the outcome.

Match Information:
- Match ID: ${data.matchId}
- Duration: ${Math.floor(data.gameDuration / 60)} minutes ${data.gameDuration % 60} seconds
- Game Mode: ${data.gameMode}
- Queue ID: ${data.queueId}

Winning Team (${winningTeam?.teamId}):
${winningTeam?.participants.map(p => 
  `- ${p.championName} (${p.summonerName}): ${p.kills}/${p.deaths}/${p.assists} KDA, ${p.cs} CS, ${p.gold} Gold, ${p.damage} Damage, ${p.visionScore} Vision Score`
).join('\n')}

Losing Team (${losingTeam?.teamId}):
${losingTeam?.participants.map(p => 
  `- ${p.championName} (${p.summonerName}): ${p.kills}/${p.deaths}/${p.assists} KDA, ${p.cs} CS, ${p.gold} Gold, ${p.damage} Damage, ${p.visionScore} Vision Score`
).join('\n')}

Team Objectives:
- Baron Kills: ${data.objectives.baronKills}
- Dragon Kills: ${data.objectives.dragonKills}
- Rift Herald Kills: ${data.objectives.riftHeraldKills}
- Tower Kills: ${data.objectives.towerKills}

Please provide a comprehensive match analysis including:
1. **Team Composition Analysis** - Strengths and weaknesses of each team's picks
2. **Key Performance Indicators** - Who performed well/poorly and why
3. **Critical Moments** - What likely determined the outcome
4. **Strategic Insights** - What the winning team did right
5. **Improvement Suggestions** - What the losing team could have done better
6. **Meta Analysis** - How this match reflects current meta trends
7. **Individual Player Analysis** - Standout performances and areas for improvement

Format your response in a clear, actionable way that helps players understand the match dynamics and improve their gameplay.`;

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    
    if (result.candidates && result.candidates[0] && result.candidates[0].content) {
      const content = result.candidates[0].content.parts[0].text;
      
      // Save response to file
      await saveGeminiResponse(`match-${data.matchId}`, content);
      
      return {
        success: true,
        content: content
      };
    } else {
      throw new Error('No content generated by Gemini');
    }
  } catch (error) {
    console.error('Gemini API Error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}

async function saveGeminiResponse(championName: string, content: string): Promise<void> {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `gemini-analysis-${championName.toLowerCase().replace(/\s+/g, '-')}-${timestamp}.txt`;
    
    const response = await fetch('/api/save-gemini-response', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        filename,
        content,
        championName,
        timestamp: new Date().toISOString()
      })
    });

    if (!response.ok) {
      console.error('Failed to save Gemini response to file');
    }
  } catch (error) {
    console.error('Error saving Gemini response:', error);
  }
}
